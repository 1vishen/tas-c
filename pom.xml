<!--
  This is the main Maven configuration file (Project Object Model).
  It describes your Java project: its structure, dependencies, plugins, and build settings.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- The POM model version. Always use 4.0.0 -->
  <modelVersion>4.0.0</modelVersion>

  <!--
    groupId: A reverse domain-style identifier for your project or organization.
    It's like a namespace. For example, com.example or org.myproject.
  -->
  <groupId>com.tas_c</groupId>

  <!--
    artifactId: The name of your actual project or module.
    This becomes the base name of the built JAR file.
  -->
  <artifactId>tas_c</artifactId>

  <!--
    version: The version number of your project.
    SNAPSHOT means it's still in development (not final/release).
  -->
  <version>1.0-SNAPSHOT</version>

  <!-- Properties define default values used across plugins -->
  <properties>
    <!-- Java version we want to compile with. Java 17 is the latest supported by Replit -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- Ensures all files are read/saved as UTF-8 -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <!-- Dependencies are external libraries your code uses -->
  <dependencies>
    <!--
      JUnit Jupiter is the test framework (JUnit 5).
      This pulls both the API and runtime engine for writing and running tests.
    -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>5.10.0</version>
      <scope>test</scope> <!-- test scope: only used during testing, not in production -->
    </dependency>
  </dependencies>

  <!-- Build section defines how the project is compiled and run -->
  <build>
    <plugins>

      <!--
        The Maven Compiler Plugin actually compiles your Java code.
        Version 3.11.0 is latest and supports Java 17+.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <!-- Use --release 17 flag (instead of source/target combo) for consistent classpath -->
          <release>17</release>
        </configuration>
      </plugin>

      <!--
        The Surefire Plugin runs your unit tests.
        This is how 'mvn test' knows what to execute.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
      </plugin>

      <!--
        Optional: The Exec Plugin allows us to run the main method of our app via `mvn exec:java`.
        This is helpful for running on Replit or via terminal.
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <mainClass>com.tas_c.Tas_c</mainClass> <!-- Fully qualified class name -->
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
